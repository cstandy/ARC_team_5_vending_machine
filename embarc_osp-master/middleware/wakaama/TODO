LWM2M Features
--------------

 - Bootstrap interface:
 Implements LWM2M Bootstap Server as a special instance of lwm2m_server_t.
 
 - Access Control List
 
 - JSON support
  
 - Add token in every message
 
 - Handle Observe parameters
 
 - Keep-alive mechanism
 
 - Support for Object Link datatype
 
 - Discover method support
 
 
 Bugfixes
 --------
 
   - Server-side Observer cancellation is not working
 
 
 Implementation Improvments
 --------------------------
 
  - Store lwm2m_transaction_t per peer
  
  - bufferize all CoaP messages until all callbacks returned
  Currently if a server sends a request from its monitoring callback upon client
  registration, the client will receive the request before the ACK to its register
  and it will discard it.
  
  - Easy access to the lwm2m_context_t from objects callbacks
  
  - Use an unified result callback
  Add some parameter so that the same user callback can be used for all DM operations.
   
  - Use lwm2m-*-t types in er-coap-13
  To avoid multiple conversions.
  
  - Switch to void* parameters in lwm2m_list_* APIs
  
  - Utility functions to easily implements objects
  The utility will just use read and write individual resources. Either statically or
  throught callbacks. See [https://github.com/01org/libdmclient]/tests/mgtobj/utils/static_mo_util.h

  - Remove lwm2m_start() API
  Its job should be done by lwm2m_configure() or lwm2m_step() at first run or after a bootstrap.
  
  - Remove lwm2m_object_t::closeFunc()
  The lwm2m_object_t data is the sole responsibility of the client application.
  
  - Use lwm2m_tlv_t in server-side APIs
  This would hides the TLV or JSON marshalling.
  
  - Provide an example client (and server) using tinyDTLS
  
  - Put platform specific includes and definitions in a separate header file
  To ease porting to non-POSIX platforms. This header could contain functions for LWM2M_EMBEDDED_MODE,
  includes like sys/time.h and LWM2M_*_ENDIAN
  
  - Replace or abstract snprintf() and sscanf()
  for embedded platforms
