/******************************************************************************
 *
 * Copyright (c) 2017, Synopsys, Inc.
 *
 *
 *
 */
/*! \page page_os OS

\tableofcontents

\section sect_os_introduction OS Introduction

embARC provides a choice of well-known and popular embedded OSes with using DesignWare ARCv2 Processors in embedded applications, especially Internet of Things (IoT).  \n
Two OSs are currently supported in embARC: <a href="http://freertos.org/">FreeRTOS</a>, and <a href="http://www.synopsys.com/dw/ipdir.php?ds=os_mqx_software">MQX</a>. \n
\n

\section sect_os_freertos FreeRTOS

[FreeRTOS](http://freertos.org/) is the market-leading real-time operating system (or RTOS), and the de-facto standard solution for microcontrollers and small microprocessors.
	+ Provides a single and independent solution for many different architectures and development tools.
	+ Is feature rich and still undergoing continuous active development.
	+ Has a minimal ROM, RAM, and processing overhead. Typically an RTOS kernel binary image is 6K to 12K bytes.
	+ Is very simple - the core of the RTOS kernel is contained in only three C files. The majority of the many files included in the .zip file download relate only to the numerous demonstration applications.
	+ Is truly free for use in commercial applications.
	+ Comes with a porting, platform development, or application development service if required.
	+ Is well established with a large and ever growing user base.
	+ Provides ample documentation.
	+ Is very scalable, simple, and easy to use.

\anchor      EMBARC_OS_MQX_SUPPORT
\section sect_os_mqx MQX

The [DesignWare ARC MQX RTOS](http://www.synopsys.com/dw/ipdir.php?ds=os_mqx_software) solution offers a highly optimized application development platform designed for speed and size efficiency, with optimized support for all DesignWare ARC processors. embARC middleware and drivers are ported and verified on MQX and available to MQX licensees upon request. \n
The ARC MQX RTOS solution includes full source code and offers many comprehensive features that support reliability, deterministic performance, reconfiguration, and multiprocessing. The scalable design allows MQX users to pick the components and features they require from MQX and prevents unused features from being included in the RTOS memory footprint. With code size as low as 3.5 KB, the MQX RTOS solution is small enough to replace a home-grown scheduler while still providing a much more comprehensive feature set. \n
With MQX's function-level scalability, API functions outside of the central core are only included in the linked image if they are explicitly called by the application. This, along with dozens of compile-time configuration options (also grouped into sets), gives application developers maximum control over the memory footprint of MQX.

\section sect_os_add_new_os_to_embARC Adding a New OS to embARC

Follow the steps below to add a new OS:
- Include <target-os>.mk in os.mk. Add corresponding definitions such as OS_ID, OS_CSRDIR, OS_ASMSRCDIR, and OS_INCDIR.
- Add necessary definitions in os_hal_inc.h, such as the header-files path of <target-os> and the definition of os_hal_exc_init. The os_hal_exc_init() function is provided to initialize the exception- and interrupt-related features of <target-os>.
- Create a sub-folder named <target-os> and add <target_os>.mk into it.
- In <target-os>.mk, add how to build the <target-os> and generate the lib<target-os>.a, such as modules and definitions. FreeRTOS.mk is a simple template. Contiki.mk can also be used as a template but is more complicated.
- Refer to other embARC supported OSes as reference.

*/
