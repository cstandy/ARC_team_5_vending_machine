/******************************************************************************
 *
 * Copyright (c) 2017, Synopsys, Inc.
 *
 *
 *
 */
/*! \page page_example Example
\tableofcontents
\section sect_example_how_to_use_embARC How to Use embARC

\subsection sect_example_how_to_use_embARC_usage_notice Prerequisites Before Using embARC

Before working with embARC, review the following prerequisites:
- Make sure to check whether the path of \ref EMBARC_DEVELOPMENT_REQUIREMENT "All the Required Tools(updated)" for the MetaWare and ARC GNU tool chains is added to the system variable **PATH** in your environment variables.
- Download extra third-party source code and apply embARC patches; for details see \ref EMBARC_APPLY_PATCHES "Download Extra Source Code and Apply Required Patches".
- Use **gmake** with the MetaWare toolchain and **make** with the ARC GNU toolchain.
- The embARC software build system is purely makefile-based. Developers need to provide makefiles for new embARC applications. The makefile template can be found at <b><embARC>/example/example.makefile</b>.
- Go to \ref page_example_usage "Example Usage Guide" for more details.
\anchor      EMBARC_ARCGNU_OPENOCD_PATHSET
- Using the ARC GNU toolchain
  - If running and debugging embARC applications using arc-elf32-gdb and OpenOCD, check whether the path of openocd is added to the **PATH** in your environment variables and modify the **OPENOCD_SCRIPT_ROOT** variable in <b><embARC>/options/toolchain/toolchain_gnu.mk</b> according to your OpenOCD root path.
  - If running GNU program with using the GNU toolchain on Linux, modify the OpenOCD configuration file as Linux format with LF line terminators. **dos2unix** can be used to convert it.
  - If using the embARC pre-installed GNU IDE projects on Windows, installing the GNU IDE in the default location is recommended. If using the embARC pre-installed GNU IDE projects on Linux, or installing the GNU IDE in non-default locations on Windows, it is necessary to change the OpenOCD executable path and OpenOCD configuration file path in the tab of <b>Debugger->Gdbserver Settings</b> manually for the debug configuration.
- Using Ashling Opella-XD debugger
  - If you want to use Ashling Opella-XD debugger, you need to set **JTAG** to *opella*, and check where the driver for this JTAG located.
  - You need to check and change all the **ASH_PATH** defined in <b>options/scripts.mk</b> according to where you install the driver to and the OS environment you use.
  - Only supported by Metaware.

\note See \ref EMBARC_KNOWN_ISSUES "FAQS" and check [embARC website](https://embarc.org/) and [embARC Forum](https://forums.embarc.org/) for the latest information on known issues. If you find any issues to report, post a new discussion item in [embARC Forum](https://forums.embarc.org/).
\note <b><embARC></b> represents the location where you put the embARC source code, such as **C:/embARC**.

\subsection sect_example_how_to_use_embARC_targets_in_make Make Targets for embARC

There are several targets to make and run embARC examples on the command line. These make targets are defined in <b>options/rules.mk</b>, and an overview is provided below. All the commands below use the default make options provided in the embARC application makefile.

- <b>make help</b>: Show help document about how to use make in embARC.
- <b>make all</b>: Compile and link the target program.
- <b>make build</b>: Clean current configuration object files and rebuild configuration.
- <b>make run</b>: Compile and link the target program. For the MetaWare toolchain, call the MetaWare debugger (mdb) to load the target program onto EMSK. For the ARC GNU toolchain, call arc-elf32-gdb and OpenOCD to load the target program onto EMSK.
- <b>make gui</b>: Compile and link the target program. Launch the MetaWare debugger (MDB) in GUI mode for the MetaWare toolchain or arc-elf32-gdb in command-line mode for the ARC GNU toolchain to debug the target program.
- <b>make clean</b>: Clean object files for current build configuration.
- <b>make boardclean</b>: Clean all object files for currently selected board.
- <b>make distclean</b>: Clean all object files for different configurations.
- <b>make cfg</b>: Print current configurations of embARC.
- <b>make opt</b>: Print detailed configuration properties of embARC.

See \ref sect_example_usage_GeneralBuildSteps for more details.

\note For example, if you are running <b><embARC>/example/baremetal/bootloader</b> with <b>make run</b> command on the command line, the default \ref sect_example_how_to_use_embARC_make_options "Make Options" are enabled in the embARC application makefile. Run the <b>make cfg</b> command to see the default configuration for this application.

\subsection sect_example_how_to_use_embARC_make_options Make Options for embARC

- The make options are defined for using embARC flexibly. They can be set through make command or hard-coded in the application makefile.
- Most options are located in <b><embARC>/options/options.mk</b>. If you change an option value in <b><embARC>/options/options.mk</b>, it will affect all the applications to some extent. You can set the value of the options in your own application makefile for the specified application.

\note It is better to set <b>BOARD</b>, <b>BD_VER</b>, <b>CUR_CORE</b>, and <b>TOOLCHAIN</b> in the make command, such as *make BOARD=emsk BD_VER=22 CUR_CORE=arcem7d TOOLCHAIN=gnu*. It is better to hard-code other make options in the application makefile.

\subsubsection subsect_example_how_to_use_embARC_make_options_cmd Options to Set Using the make Command

- <b>BOARD</b>: Select the target board.
  - The default value of this option is defined in **board/board.mk**.
  - Optional values as below, default value is *emsk*.
    |   BOARD       |       Description              |
    | ------------  | ------------------------------ |
    |   emsk        | \ref page_board_emsk           |
    |   axs         | \ref page_board_axs            |
    |   nsim        | \ref page_board_nsim           |
    |   hsdk        | \ref page_board_hsdk           |

  - For example, *make BOARD=emsk* selects the EMSK board as the target board.

- <b>BD_VER</b>: Select the board version.
  - The default value of this option is defined in one of the following makefiles according to your **BOARD** option.
    |   BOARD       |  Location of the definition of BD_VER |
    | ------------  | ------------------------------------- |
    |   emsk        | board/emsk/emsk.mk                    |
    |   axs         | board/axs/axs.mk                      |
    |   nsim        | board/nsim/nsim.mk                    |
    |   hsdk        | board/hsdk/hsdk.mk                    |

  - For the *emsk* board, three versions are supported in embARC: 1.1, 2.2, and 2.3. The optional values of *BD_VER* are *11*, *22* and *23*. The *BD_VER* must match the target EMSK version. For example, programs built for 1.1 cannot run on an EMSK 2.x board. The default value of *BD_VER* for the *emsk* board is *22*.
    - For EMSK 2.0, 2.1 and 2.2, you can upgrade the firmware version to 2.3, and for EMSK 1.0, you can upgrade the firmware version to 1.1.
  - For the *axs* board, one version is supported: 103. The optional value of *BD_VER* is *103*. The default value of *BD_VER* for the *axs* board is *103*.
  - For the *nsim* board, two versions are supported: 10, 1506. The optional value of *BD_VER* is *1506* and *10*. The default value of *BD_VER* for the *nsim* board is *1506*.
  - For the *hsdk* board, one version is supported: 10. The optional value of *BD_VER* is *10*. The default value of *BD_VER* for the *hsdk* board is *10*.
  - For example, *make BOARD=emsk BD_VER=22* selects *2.2* as the EMSK target board version.

- <b>CUR_CORE</b>: Select the core configuration for the specified board version.
  - For <em>emsk - 11</em>, the default value of this option is defined in **board/emsk/configs/11/core_config.mk**.
  - Optional values for <em>emsk - 11</em>; default value is *arcem6*.
    |   CUR_CORE   |       Description      |
    | ------------ | ---------------------- |
    |   arcem4     | ARC EM4 core           |
    |   arcem4cr16 | ARC EM4CR16 core       |
    |   arcem6     | ARC EM6 core           |
    |   arcem6gp   | ARC EM6GP core         |

  - For <em>emsk - 22</em>, the default value of this option is defined in **board/emsk/configs/22/core_config.mk**.
  - For <em>emsk - 23</em>, the default value of this option is defined in **board/emsk/configs/23/core_config.mk**.
  - Optional values for <em>emsk - 22/23</em>; default value is *arcem7d*.
    |   CUR_CORE   |       Description      |
    | ------------ | ---------------------- |
    |   arcem7d    | ARC EM7D core          |
    |   arcem9d    | ARC EM9D core          |
    |   arcem11d   | ARC EM11D core         |

  - For <em>axs - 103</em>, the default value of this option is defined in **board/axs/configs/103/core_config.mk**.
  - Optional values for <em>axs - 103</em>; default value is *archs36*.
    |   CUR_CORE   |       Description      |
    | ------------ | ---------------------- |
    |   archs36    | ARC HS36 core          |

  - For <em>nsim - 1506</em>, the default value of this option is defined in **board/nsim/configs/1506/core_config.mk**.
  - Optional values for <em>nsim - 1506</em>; default value is *arcemfull*.
    |   CUR_CORE             |       Description              |
    | ---------------------- | ------------------------------ |
    |   arcemfull            | ARC EM core with full features |
    |   archs                | ARC HS core                    |
    |   arcemsecureshield    | ARC EM core with secure feature|

  - For <em>nsim - 10</em>, the default value of this option is defined in **board/nsim/configs/10/core_config.mk**.
  - Optional values for <em>nsim - 10</em>; default value is *arcem*.
    |   CUR_CORE   |       Description              |
    | ------------ | ------------------------------ |
    |   arcem      | ARC EM core                    |
    |   archs      | ARC HS core                    |

  - For <em>hsdk</em>, the default value of this option is defined in **board/hsdk/configs/10/core_config.mk**.
  - Optional values for <em>hsdk</em>; default value is *archs38_c0*.
    |   CUR_CORE   |       Description      |
    | ------------ | ---------------------- |
    |  archs38_c0  | ARC HS38x4 core 0      |
    |  archs38_c1  | ARC HS38x4 core 1      |
    |  archs38_c2  | ARC HS38x4 core 2      |
    |  archs38_c3  | ARC HS38x4 core 3      |

  - For example, *make BOARD=emsk BD_VER=23 CUR_CORE=arcem11d* selects the *arcem11d* core configuration for emsk 2.3.

- <b>TCF</b>: Select the tool configuration file(tcf).
  - Through this option, you can choose the tcf file you provided by this option for specified board and core configuration.
  - The the tcf file you provided by this option must use absolute file path or relative file path(relative to where your application makefile located).
  - Currently, this option is not supported in nsim-1506 board, but supported in other boards.
  - For example, when the current board and core is emsk 2.3 arcem7d, then you can pass your own tcf file to replace the default.
    eg. There is arcem.tcf file in the folder where application's makefile located, you can run **gmake BD_VER=23 CUR_CORE=arcem7d TCF=arcem.tcf** to do this.
  - When you specify you own tcf file, you need to clean the project first before build it.

- <b>TOOLCHAIN</b>: Select the toolchain to compile the embARC software.
  - The default value of this option is defined in **options/options.mk**.
  - Optional values below; default value is *mw*.
    |   TOOLCHAIN   |       Description              |
    | ------------  | ------------------------------ |
    |   mw          | MetaWare Development Toolkit   |
    |   gnu         | ARC GNU Development Toolset    |

  - For example, *make BOARD=emsk BD_VER=23 CUR_CORE=arcem11d TOOLCHAIN=gnu* selects the ARC GNU toolset to compile embARC applications for emsk 2.3 arcem11d.

- <b>DIG_NAME</b>: Specify the Digilent USB JTAG name.
  - The default value of this option is defined in **options/options.mk**.
  - This option's default value is empty. It is not necessary to set it when just one JTAG is connected to your PC. It is useful if more than one EMSK JTAG cable is connected to your PC, for example, to debug two EMSK boards using one PC. See \ref sect_example_usage_HowToDebugMultiBoards "How to Debug Multiple Boards in embARC" for details.
  - This option is only available when the MetaWare toolkit is selected. This option is a simple wrapper of the <b>-prop=dig_device=name</b> option of the MetaWare debugger (mdb). See the MetaWare Debugger User's Guide for details.

- <b>V</b>: Control whether to show verbose compiling information.
  - The default value of this option is defined in **options/options.mk**.
  - This option is rarely used, and its default is *0*.
  - *0* means just show basic compiling information; *1* means show verbose information.

\subsubsection subsect_example_how_to_use_embARC_make_options_makefile Options to Hard-Code in the Application Makefile

- <b>OLEVEL</b>: Select the compiler optimization level. Possible choices are *O, O0, O1, O2, O3, Os, Os1, Oz, Ofast, Og*, or you can leave the OLEVEL blank to not select any optimization, like <b>OLEVEL= </b>.
  - The default value of this option is defined in **options/options.mk**.
  - For example, *make BOARD=emsk BD_VER=22 CUR_CORE=arcem11d TOOLCHAIN=gnu OLEVEL=O2* selects optimization level O2 of the ARC GNU toolchain to compile embARC applications for EMSK 2.2 and arcem11d.

- <b>JTAG</b>: Select the JTAG probe to load and debug the target program.
  - The default value of this option is defined in **options/options.mk**.
  - Optional values below; the default value is *usb*.
    |   JTAG        |       Description              |
    | ------------  | ------------------------------ |
    |   usb         | Digilent USB JTAG cable        |
    |   opella      | Ashling Opella-XD JTAG probe   |

  - For example, *make BOARD=emsk BD_VER=22 CUR_CORE=arcem11d OLEVEL=O2 TOOLCHAIN=gnu run* selects the ARC GNU toolchain to compile embARC applications with optimization level O2 for EMSK 2.2 arcem11d, and load the applications using Digilent USB JTAG.
  - *opella* is only supported for the MetaWare Development Toolkit.

- <b>OS_SEL</b>: Select operating system.
  - This option should be defined in your application makefile.
  - Set this option in the makefiles of the examples if OS services are required.
  - Optional operating system values are shown below.
    |   OS_SEL      |       Description                               |
    | ------------  | ----------------------------------------------- |
    |   freertos    | \ref EMBARC_APPS_OS_FREERTOS "FreeRTOS Runtime" |

  - If you leave the *OS_SEL* value blank, such as  <b>OS_SEL= </b>, no OS services are selected; just use \ref EMBARC_APPS_BAREMETAL "Bare-Metal Run Time".
  - For developing different run-time applications with embARC, it is helpful to review the examples in <em><embARC>/example</em>.

- <b>MID_SEL</b>: Select middleware to be used in embARC application.
  - This option should be defined in your application makefile.
  - All available middleware is located in <em><embARC>/middleware</em>.
  - \ref sect_mid_middleware_list "Available list of middleware of embARC"
  - It is recommended to include [common](\ref sect_middleware_general_middleware_common) middleware to provide basic printf() functionality using xprintf().

- <b>LIB_SEL</b>: Select libraries to be used in the embARC application.
  - This option should be defined in your application makefile.
  - All available libraries are located in <em><embARC>/library</em>.
  - *clib* is the default.
  - Optional library values are shown below.
    |   LIB_SEL     |       Description                                 |
    | ------------  | ------------------------------------------------- |
    |  clib         | \ref sect_lib_clib "C Library Support"            |
    |  secureshield | \ref sect_lib_secureshield "SecureShield Library" |

- <b>APPL_LIBS</b>: Set extra required application libraries to be linked.
  - This option should be defined in your application makefile.
  - This *APP_LIBS* option collects extra linker option to include extra libraries to be linked.
  - For example, <em>APPL_LIBS = -lm</em> means linking math library to target program, "-lm" only support GNU toolchain

- <b>HEAPSZ</b>: Set application heap size in bytes.
  - This option should be defined in your application makefile.
  - The default value of this option is defined in **options/options.mk**.
  - The default value is 8192, which means the heap size of the application is set to 8192 bytes by default.
  - For baremetal and Contiki applications, this *HEAPSZ* configuration is useful.
  - For FreeRTOS applications, you can define the RTOS heap size by setting *configTOTAL_HEAP_SIZE* in FreeRTOSConfig.h.

- <b>STACKSZ</b>: Set application stack size in bytes.
  - This option should be defined in your application makefile.
  - The default value of this option is defined in **options/options.mk**.
  - The default value is 8192, which means the stack size of the application is set to 8192 bytes by default.
  - For baremetal and Contiki applications, this *STACKSZ* configuration is useful.
  - For FreeRTOS applications, you can define the minimum RTOS task stack size by setting *configMINIMAL_STACK_SIZE* in FreeRTOSConfig.h, and define each task's stack size in the application source code.

- <b>USE_BOARD_MAIN</b>: Control which board init process is used.
  - The default value of this option is defined in **board/board.mk**.
  - Default value is 1; set in <em><embARC>/board/board.mk</em>.
  - When this option is 0, it uses the normal board init process, compatible with previous embARC releases; you must do board_init yourself.
  - When this option is 1, embARC initializes fatfs, ntshell, and lwip with WiFi and creates a FreeRTOS task for main(). You only need to write applications or create new tasks in the main() function. When ntshell is enabled, the main() function needs to be triggered by the ntshell *main* command.
  - For more details about how this new process is implemented, see <em><embARC>/board/board.c</em>.
  - In most cases, you don't need to change this value to *0*.

- <b>EXT_DEV_LIST</b>: Select peripheral device drivers used in example.
  - Use it in the example's makefile, like this `EXT_DEV_LIST += sensor/temperature/adt7420`
  - Optional values for *EXT_DEV_LIST* can be found in *device/peripheral*.
  - Select the peripheral device drivers relative path you want to use, and add to `EXT_DEV_LIST`.
  - If more than one peripheral device drivers are selected, please use space between each other, such as `EXT_DEV_LIST += wifi/mrf24g sensor/temperature/adt7420`
  - Some onboard peripheral device drivers are already selected according to the board you use, you can check it in board makefile.
  - *WIFI_SEL* is not available now, if you want to choose different WiFi, you need to change the `EXT_DEV_LIST` in your example makefile.

- <b>EMBARC_ROOT</b>: Set embARC source-code root directory path.
  - This option should be defined in your application makefile.
  - This option specifies the path of the embARC source-code root.
  - The path can be relative or absolute.

- embARC application related options
  - These options should be defined in your application makefile.
  - <b>APPL</b>: Set embARC application name.

  - <b>APPL_CSRC_DIR</b>: Set the path of application C source-code directories used.
    - All used c source-code directory paths including subfolders need to be added.
    - C source-code files should be suffixed with *c* or *C*, such as <em>*.c or *.C</em>.
    - The paths are separated by whitespace.

  - <b>APPL_ASMSRC_DIR</b>: Set the path of application assembly source-code directories used.
    - All used assembly source-code directory paths including subfolders need to be added.
    - Assembly source-code files should be suffixed with *s* or *S*, such as <em>*.s or *.S</em>.
    - The paths are separated by whitespace.

  - <b>APPL_INC_DIR</b>: Set the path of application include-file directories used.
    - All used include-file directory paths including subfolders need to be added.
    - The paths are separated by whitespace.

  - <b>APPL_DEFINES</b>: Set extra macros defined from makefile for this application.
    - The macro definitions are separated by whitespace.
    - For example, if you want to define <em>USE_EMBARC=1</em>, then you should set the value to <em>-DUSE_EMBARC=1</em>.

  - Additional compiler, assembler, and linker options.
    - <b>ADT_COPT</b>: Additional compiler options; see the compiler manual for help.
    - <b>ADT_AOPT</b>: Additional assembler options; see the assembler manual for help.
    - <b>ADT_LOPT</b>: Additional linker options; see the linker manual for help.

\section sect_example_build_an_application_in_embARC Building an Application in embARC

We provided some examples and applications in embARC, user can take reference from them.
- Access to the examples: [source code of embARC examples](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_osp/tree/master/example)
- Access to the applications: [source code of embARC applications](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications)

Studying the provided example makefiles which cover all the components is a recommended way to build your application in embARC.
- <a href="https://forums.embarc.org/"><b>embARC Forums</b></a>
- \subpage page_example_usage "embARC Example Usage"
- \subpage page_example_compatibility_matrix "Compatibility Matrix for embARC Examples"

Project templates are also provided: <b>example.makefile</b> for makefile, <b>main.c.tmpl</b> for main.c. The steps to build your embARC application are:

- Create your application directory, copy the <b>example.makfile</b> in, and rename it to <b>makefile</b>.
- Set the parameters in the makefile, such as application name (APPL) and board-related parameters. <b>EMBARC_ROOT</b> is the relative path to the root of the embARC software.
- Select the required middleware (MID_SEL) and OS (OS_SEL).
- Set the source code (src) directory (APPL_CSRC_DIR for C files and APPL_ASMSRC_DIR for assembly (.s/.S)). The build system automatically collects the source files in the specified directories.
- Write application code. For bare metal, the <b>main()</b> function is the application entry, and some initialization must be done at the beginning of <b>main()</b>. For OS-based applications, see the provided OS-based examples.
- Build application code. See \ref page_example_usage "embARC Example Usage" for detailed usage information.

\section sect_example_overview_of_provided_embARC_examples Overview of embARC Examples
The embARC platform comes with a large range of examples using the various OS, middleware and peripherals supported in embARC.\n
These examples provide a useful reference and starting point for embARC developers for their own applications. \n
The .elf files of the following examples can be loaded through JTAG, or the .bin files through SD card by secondary bootloader .

Please visit \ref EMBARC_APPS "embARC Examples", [<b>embARC Applications</b>](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications)
and \ref EMBARC_APPS_USERGUIDE "Example Usage Guide" for detailed usage information.

\anchor      EMBARC_EXAMPLE_DOCUMENTTABLE
- **Here is the list of embARC examples**, located in <i><embARC>/example</i>.
|          Example Name          |          Example Directory           |          Example Document Link           |
|  ---------------------------   |  ----------------------------------  |  --------------------------------------  |
|  baremetal_arc_feature_cache   | baremetal/arc_feature/cache  |   \ref EMBARC_APP_BAREMETAL_ARC_FEATURE_CACHE  |
|  baremetal_arc_feature_timer_interrupt   | baremetal/arc_feature/timer_interrupt  |   \ref EMBARC_APP_BAREMETAL_ARC_FEATURE_TIMER_INTERRUPT  |
|  baremetal_arc_feature_udma   | baremetal/arc_feature/udma  |   \ref EMBARC_APP_BAREMETAL_ARC_FEATURE_UDMA  |
|  baremetal_ble_hm1x   | baremetal/ble_hm1x  |   \ref EMBARC_APP_BAREMETAL_BLE_HM1X  |
|  baremetal_blinky   | baremetal/blinky  |   \ref EMBARC_APP_BAREMETAL_BLINKY  |
|  baremetal_axs103   | baremetal/axs103  |   \ref EMBARC_APP_BAREMETAL_ARC_FEATURE_AXS103  |
|  baremetal_bootloader   | baremetal/bootloader  |   \ref EMBARC_APP_BAREMETAL_BOOTLOADER  |
|  baremetal_cxx   | baremetal/cxx  |   \ref EMBARC_APP_BAREMETAL_CXX  |
|  baremetal_dma_spiflash   | baremetal/dma_spiflash  |   \ref EMBARC_APP_BAREMETAL_DMA_SPIFLASH  |
|  baremetal_graphic_u8glib   | baremetal/graphic_u8glib  |   \ref EMBARC_APP_BAREMETAL_GRAPHIC_U8GLIB  |
|  baremetal_openthread_cli   | baremetal/openthread/cli  |   \ref EMBARC_APP_BAREMETAL_OPENTHREAD_CLI  |
|  baremetal_openthread_ncp   | baremetal/openthread/ncp  |   \ref EMBARC_APP_BAREMETAL_OPENTHREAD_NCP  |
|  baremetal_secureshield_secret_secure   | baremetal/secureshield/secret_secure  |   \ref EMBARC_APP_BAREMETAL_SECURESHIELD_SECRET_SECURE  |
|  baremetal_secureshield_secret_normal   | baremetal/secureshield/secret_normal  |   \ref EMBARC_APP_BAREMETAL_SECURESHIELD_SECRET_NORMAL  |
|  baremetal_secureshield_secret_secure_sid   | baremetal/secureshield/secret_secure_sid  |   \ref EMBARC_APP_BAREMETAL_SECURESHIELD_SECRET_SECURE_SID  |
|  baremetal_secureshield_test_case   | baremetal/secureshield/test_case  |   \ref EMBARC_APP_BAREMETAL_SECURESHIELD_TEST_CASE  |
|  freertos_iot_coap_coap_server   | freertos/iot/coap/coap_server  |   \ref EMBARC_APP_FREERTOS_IOT_COAP_COAP_SERVER  |
|  freertos_iot_lwm2m_iot_demo   | freertos/iot/lwm2m/iot_demo  |   \ref EMBARC_APP_FREERTOS_IOT_LWM2M_IOT_DEMO  |
|  freertos_iot_lwm2m_lwm2m_client   | freertos/iot/lwm2m/lwm2m_client  |   \ref EMBARC_APP_FREERTOS_IOT_LWM2M_LWM2M_CLIENT  |
|  freertos_iot_lwm2m_lwm2m_server   | freertos/iot/lwm2m/lwm2m_server  |   \ref EMBARC_APP_FREERTOS_IOT_LWM2M_LWM2M_SERVER  |
|  freertos_kernel   | freertos/kernel  |   \ref EMBARC_APP_FREERTOS_KERNEL  |
|  freertos_kernel_secure   | freertos/kernel_secure  |   \ref EMBARC_APP_FREERTOS_KERNEL_SECURE  |
|  freertos_net_httpserver   | freertos/net/httpserver  |   \ref EMBARC_APP_FREERTOS_NET_HTTPSERVER  |
|  freertos_net_ntshell   | freertos/net/ntshell  |   \ref EMBARC_APP_FREERTOS_NET_NTSHELL  |
|  freertos_sec_mbedtls_dtls_client   | freertos/sec/mbedtls/dtls/client  |   \ref EMBARC_APP_FREERTOS_SEC_MBEDTLS_DTLS_CLIENT  |
|  freertos_sec_mbedtls_dtls_server   | freertos/sec/mbedtls/dtls/server  |   \ref EMBARC_APP_FREERTOS_SEC_MBEDTLS_DTLS_SERVER  |
|  freertos_sec_mbedtls_ssl_client2   | freertos/sec/mbedtls/ssl/client2  |   \ref EMBARC_APP_FREERTOS_SEC_MBEDTLS_SSL_CLIENT2  |
|  freertos_sec_mbedtls_ssl_server2   | freertos/sec/mbedtls/ssl/server2  |   \ref EMBARC_APP_FREERTOS_SEC_MBEDTLS_SSL_SERVER2  |

- **Here is a list of embARC applications**, located in [embARC applications](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications).
|          Application Name      |         Application Link             |
|  ---------------------------   |  ----------------------------------  |
|  aws_iot_smarthome             | [AWS IoT Smarthome Application](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications/tree/master/aws_iot_smarthome)        |
|  aws_iot_smarthome_multinode   | [AWS IoT Smarthome Multi-node Application](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications/tree/master/aws_iot_smarthome_multinode)  |
|  ibaby_smarthome_multinode     | [iBaby Smarthome Application](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications/tree/master/ibaby_smarthome_multinode)  |
|  ilight_smartdevice            | [iLight SmartDevice Application](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications/tree/master/ilight_smartdevice)  |
|  ot_smarthome_multinode        | [OpenThread Smarthome Application](https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications/tree/master/ot_smarthome_multinode)  |

\section sect_example_division_of_provided_embARC_examples Division of embARC Examples

embARC provides bare-metal and FreeRTOS examples. You can click on the following links to go to the appropriate section.
- [Baremetal Examples](\ref EMBARC_APPS_BAREMETAL)
- [FreeRTOS Examples](\ref EMBARC_APPS_OS_FREERTOS)

*/
