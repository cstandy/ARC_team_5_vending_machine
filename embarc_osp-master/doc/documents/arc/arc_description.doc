/******************************************************************************
 *
 * Copyright (c) 2017, Synopsys, Inc.
 * \version 0.1
 * \date 2014-09-29
 * \author Wayne Ren
 *
 */
/*! \page page_arc ARC
\tableofcontents
\section sect_arc_description Description

The ARC <b>Hardware Abstraction Layer</b> (HAL) provides hardware abstraction for ARC EM processors. In this layer, the following functions are provided: \n
- <b>Startup</b>: common startup routines or templates to handle necessary initializations after power on, reset, and so on. \n
- <b>Exception and interrupt management</b>: a standard exception and interrupt processing model and related resource definitions. \n
- <b>Unified intrinsic/built-in functions</b>: covering both the MetaWare and GNU toolchains. \n
- <b>Unified resource definitions</b>: registers, data types, macros, and so on. \n
- <b>Access to the resources</b>: internal timers, cache, auxiliary registers, and build configuration registers. \n

\section sect_arc_startup Startup

\subsection sect_arc_startup_in_embARC Startup in embARC

The startup process is implemented in arc_startup.s. The program jumps to the main() function after the startup process, which runs in three stages:
<ul>
<li><b>Stage 1: Hardware Initialization</b>
    <ul>
    <li>Initialize system clock (if necessary, in hardware_init_hook).
    <li>Initialize memory controller (if necessary, in hardware_init_hook).
    </ul>
<li><b>Stage 2: C Run-time Initialization</b>
    <ul>
    <li>Initialize setup stack.
    <li>Copy section.
    <li>Clear Block Started by Symbol (BSS) section.
    </ul>
<li><b>Stage 3: Go to main()</b>
    <ul>
    <li>Early initialization of software (if necessary, in software_init_hook).
    <li>Call arc_exc_init.
    <li>Jump to main() function.
    </ul>
</ul>

\htmlonly
<div class="imagebox">
    <div style="width: 500px">
        <img src="pic/startup.jpg" alt="Startup Process"/>
        <p>Startup Process</p>
    </div>
</div>
\endhtmlonly

\image latex pic/startup.jpg "Startup Process" width=12cm

Use of assembly is preferred in startup routines for performance. Special C code without any use of stack or variables is another alternative. You can customize the startup process to include other aspects, such as C++ initialization.

\subsection sect_arc_startup_scenarios Startup scenarios
The following startup scenarios are supported in the startup module:
<ul>
<li><b>Load and run in RAM</b>
    <ul>
    <li>Object files are loaded and run in RAM.
    <li>There is no need to initialize the hardware in this case.
    <li>Only the BSS section should be cleared.
    <li>Template: generic_ram.ld/.met.
    <li>Examples: loaded by a bootloader such as u-boot.
    </ul>
<li><b>Load and run in ROM</b>
    <ul>
    <li>Object files are loaded and run in ROM.
    <li>It is necessary to initialize hardware in this case.
    <li>Data section should be copied and BSS section should be cleared.
    <li>Template: generic_rom.ld/.met.
    <li>Examples: eXecute In Place(XIP).
    </ul>
<li><b>Load in ROM and run in RAM</b>
    <ul>
    <li>Object files are loaded in ROM and run in RAM.
    <li>A fixed bootstrap is needed.
    <li>Text section and data section must be copied, and BSS section must be cleared.
    <li>Template: generic_rom_ram.ld/.met.
    <li>Examples: application is put in SPI flash.
    </ul>
<li><b>Debug</b>
    <ul>
    <li>Debugger can initialize hardware, copy test section and data section, and clear BSS section.
    <li>No template is provided.
    </ul>
</ul>

\section sect_arc_exception_and_interrupt Exceptions and Interrupts

\subsection sect_arc_exception_and_interrupt_intro ARC exceptions and interrupts
ARC EM processors are designed to allow exceptions to be taken and handled by interrupt service routines in user or kernel mode. All exceptions and interrupts cause an immediate switch into kernel mode. Interrupts are disabled on entry to an exception handler. \n
Exceptions can be divided into two types: CPU exceptions and interrupt exceptions. CPU exceptions are triggered by errors such as illegal instructions, invalid or illegal memory accesses, and protection violations. Most CPU exceptions are synchronous. Interrupt exceptions are triggered by device interrupts and are always asynchronous. \n
Exception vectors are fetched in the instruction space (ICCM or main memory, but not DCCM). Every exception contains the following information: \n
<ul>
	<li><b>Vector Name</b> is a symbolic equivalent of the vector number.  \n
	<li><b>Vector Number</b> is a unique eight-bit index in the exception or interrupt vector table.  \n
	<li><b>Vector Offset</b> is an offset value calculated as four times the vector number (vector offset = 4*vector_number), which is used to determine the position of the appropriate exception or interrupt service routine. \n
	<li><b>Cause Code</b> is an eight-bit number to identify the exact cause of an exception.  \n
	<li><b>Parameter</b> is an eight-bit field to pass a single parameter from the exception to the exception handler and identify exceptions with the same cause code. \n
</ul>

For more details, see the <b><i>ARCv2 ISA Programmer's Reference Manual</i> (PRM)</b>.

\subsection sect_arc_exception_and_interrupt_in_embARC Exception and interrupt processing in embARC

A basic exception and interrupt processing framework is implemented in embARC. Through this framework, you can handle specific exceptions or interrupts by installing the desired handlers. This can help you analyze the underlying details of saving and operating registers. \n
For CPU exceptions and interrupts, <b>entry</b> is called first, then <b>handler</b> is called in <b>entry</b>. You can define your own entry using <b>exc_entry_install</b>.  \n
A standard interrupt processing model is shown in the picture below.  \n

\htmlonly
<div class="imagebox">
    <div style="width: 600px">
        <img src="pic/interrupt.jpg" alt="Interrupt Processing"/>
        <p>Interrupt Processing</p>
    </div>
</div>
\endhtmlonly

\image latex pic/interrupt.jpg "Interrupt Processing" width=12cm

In this model, interrupts have the following features:   \n
<ul>
	<li>Devices request interrupts through their own interrupt vectors and they can share the same interrupt vectors.   \n
	<li>An interrupt can be level-sensitive or pulse-sensitive.   \n
	<li>An interrupt can be enabled (unmasked) and disabled (masked).   \n
	<li>The priority of each interrupt can be programmed by software.   \n
	<li>Interrupt priority order is from INT_PRI_HIGH (highest, -1 default) to INT_PRI_MIN (lowest, -2 default).   \n
	<li>CPU lock and unlock are used to disable and enable interrupt processing.  \n
</ul>

For most Real-Time Operating Systems (RTOS), the task/process/thread priority is a positive number and starts from 1
(the highest priority). \n
Negative numbers are used to define a unified priority scheme in embARC. Priority 0 (highest priority) is always assigned to the OS scheduler. A higher-priority task can preempt a lower-priority task. The OS scheduler can preempt any other tasks. But interrupt handling tasks with negative numbers cannot be scheduled or switched by the OS scheduler.

\section sect_arc_builtin_functions Built-In Functions
Compiler built-in functions are used to invoke certain processor operations without writing assembly code. In embARC, a series of built-in functions is provided in both the MetaWare and GNU toolchains. \n
See arc_builtin.h for further details.

\section sect_arc_resource_definitions Resource Definitions

The structure of resource definitions is architecture->series->processor->board. \n
arc.h includes the common resource definitions for the ARC EM architecture, such as macros for exceptions and auxiliary register access. \n
arc_em.h includes the common resource definitions for ARC EM Processors.

\section sect_arc_access_to_resources Access to Resources

\subsection sect_arc_resources_internal_timers Internal timers
ARC EM processors have two independent 32-bit timers and a 64-bit real-time counter (RTC). Timer 0 and
Timer 1 are identical in operation. The only difference is that these timers are connected to different
interrupts. Each timer is optional with a fixed interrupt: interrupt 16 for timer 0 and interrupt 17 for timer 1. \n
The internal timers are connected to a system clock signal that always runs even when the ARC EM
processor is in the SLEEP state. The timers can be used to generate interrupt signals that wake the processor
from the SLEEP state. The processor timers automatically reset and restart after reaching the limit value. The
processor timers can be programmed to count the clock cycles only if the processor is not halted. The
processor timers can also be programmed to generate an interrupt or a system reset if
they reach the limit value. The 64-bit RTC cannot generate any interrupts. This timer is used to count the clock cycles automatically.  \n

embARC provides interfaces for internal timers such as start, stop, poll, and read.

\subsection sect_arc_resources_internal_cache Caches

ARC EM processors can be configured with both data cache (dcache) and instruction cache (icache). The cache configuration can be selected as desired. The cache can be controlled through specific auxiliary registers. \n
embARC provides unified interfaces to enable/disable, flush, invalidate, lock, and unlock cache lines and to access cache-internal RAM. See arc_cache.h for further details.

\subsection sect_arc_resources_internal_uDMA uDMA

The EM DMA controller is an optional high performance, low area/energy consumption DMA engine for use in the ARC EM 2.0 cores.\n
The DMA controller supports the following features: \n

- 1 to 16 independent programmable DMA channels (number of channels is configurable)
- User-programmable prioritization scheme for all available channels
- Concurrent operation with the CPU
- Software/Hardware--triggered DMA transfers
- Two addressing modes
- Five data transfer modes (configurable down to one)
- Internal and external interrupt support

\section sect_arc_related_files Related Files

The files relevant to the ARC EM processor in the <b>embARC software package</b> are described in the table below. \n

|             File/Folder              |                                   Content                                     |
| :----------------------------------: | :---------------------------------------------------------------------------: |
|  arc.h, arc_em.h, arc_hs.h           |  \ref ARC_HAL_CORE "Processor resources definition"                           |
|  arc_asm_common.h                    |  Common macro definitions for assembly code                                   |
|  arc_builtin.h                       |  \ref ARC_HAL_BUILTIN "Compiler built-in and helper functions"                |
|  arc_cache.c, arc_cache.h            |  \ref ARC_HAL_MISC_CACHE "ARC cache module"                                   |
|  arc_exc_asm.s                       |  \ref sect_arc_exception_and_interrupt " Assembly part of exception handling" |
|  arc_exception.c, arc_exception.h    |  \ref ARC_HAL_EXCEPTION "ARC CPU exception and interrupt exception module"    |
|  arc_startup.s                       |  \ref sect_arc_startup "Common startup routine"                               |
|  arc_timer.c, arc_timer.h            |  \ref ARC_HAL_MISC_TIMER "ARC internal timer module"                          |
|  arc_udma.c, arc_udma.h, arc_udma_config.h |  \ref ARC_HAL_MISC_UDMA "ARC uDMA module"                               |

*/ /* don't remove this comment line */
